on:
  push:
    branches:
      - main
      - develop
    tags:
      - '*'
  pull_request:
    paths:
      - '.github/workflows/build-public.yml'
      - 'docker/prod/**'
  workflow_dispatch:

name: Build - Public
jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      packages: write
      contents: read
      attestations: write
      id-token: write
    timeout-minutes: 90

    steps:
      - name: "Check out code"
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Required for WyriHaximus/github-action-get-previous-tag

      - name: "Get build"
        id: build
        run: echo "build=$(git rev-parse --short=8 HEAD)" >> "$GITHUB_OUTPUT"

      - name: "Get Previous tag (normal push)"
        id: previoustag
        if: ${{ !startsWith(github.ref, 'refs/tags/v') }}
        uses: "WyriHaximus/github-action-get-previous-tag@v1"
        with:
          prefix: "v"

      - name: "Get version"
        id: version
        run: |
          if ${{ !startsWith(github.ref, 'refs/tags/v') }}; then
            if ${{ startsWith(steps.previoustag.outputs.tag, 'v') }}; then
              version=$(echo "${{ steps.previoustag.outputs.tag }}" | cut -c 2-)
              echo "app_version=${version}" >> "$GITHUB_OUTPUT"
            else
              echo "ERROR: No previous tag found";
              exit 1;
            fi
          else
            version=$(echo "${{ github.ref }}" | cut -c 12-)
            echo "app_version=${version}" >> "$GITHUB_OUTPUT"
          fi

      - name: "Copy .env template for production"
        run: |
          cp .env.production .env
          rm .env.production .env.ci .env.example

      - name: "Add version to .env"
        run: sed -i 's/APP_VERSION=0.0.0/APP_VERSION=${{ steps.version.outputs.app_version }}/g' .env

      - name: "Add build to .env"
        run: sed -i 's/APP_BUILD=0/APP_BUILD=${{ steps.build.outputs.build }}/g' .env

      - name: "Output .env"
        run: cat .env

      - name: "Install dependencies"
        uses: php-actions/composer@v6
        if: steps.cache-vendor.outputs.cache-hit != 'true' # Skip if cache hit
        with:
          command: install
          only_args: --no-dev --no-ansi --no-interaction --prefer-dist --ignore-platform-reqs --classmap-authoritative
          php_version: 8.3

      - name: "Use Node.js"
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'

      - name: "Install npm dependencies"
        run: npm ci

      - name: "Build"
        run: npm run build

      - name: "Login to GitHub Container Registry"
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: "Login to GitHub Container Registry"
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: "Docker meta"
        id: "meta"
        uses: docker/metadata-action@v5
        with:
          images: |
            solidtime/solidtime
            ghcr.io/${{ github.repository }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}

      - name: "Set up QEMU"
        uses: docker/setup-qemu-action@v3

      - name: "Set up Docker Buildx"
        uses: docker/setup-buildx-action@v3

      - name: "Build and push"
        uses: docker/build-push-action@v6
        with:
          context: .
          file: docker/prod/Dockerfile
          build-args: |
            DOCKER_FILES_BASE_PATH=docker/prod/
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
